/*
    Author: Cory Butler
    
    Copyright Â© 2019 by American Technical Publishers, Inc.
    All Rights Reserved
*/

const replaceTerms = [
    { key: "amp", value: "&#38;" },
    { key: "ast", value: "&ast;" },
    { key: "b", value: "<b>" },
    { key: "/b", value: "</b>" },
    { key: "bold", value: "<span class='bold'>" },
    { key: "/bold", value: "</span>" },
    { key: "bracket", value: "&lbrack;" },
    { key: "/bracket", value: "&rbrack;" },
    { key: "colon", value: ":" },
    { key: "copy", value: "&copy;" },
    { key: "deg", value: "&deg;" },
    { key: "delta", value: "&#916;" },
    { key: "divide", value: "&#247;" },
    { key: "dollar", value: "&#36;" },
    { key: "doubleprime", value: "&Prime;" },
    { key: "em", value: "<em>" },
    { key: "/em", value: "</em>" },
    { key: "eta", value: "&eta;" },
    { key: "frac-denom", value: "<span class='frac-denominator'>" },
    { key: "/frac-denom", value: "</span>" },
    { key: "frac-num", value: "<span class='frac-numerator'>" },
    { key: "/frac-num", value: "</span>" },
    { key: "i", value: "<i>" },
    { key: "/i", value: "</i>" },
    { key: "ital", value: "<span class='ital'>" },
    { key: "/ital", value: "</span>" },
    { key: "mdash", value: "&mdash;" },
    { key: "micro", value: "&#xB5;" },
    { key: "minus", value: "&#8722;" },
    { key: "minus", value: "&minus;" },
    { key: "mult", value: "&times;" },
    { key: "ndash", value: "&ndash;" },
    { key: "ohm", value: "&#8486;" },
    { key: "percent", value: "%" },
    { key: "phase", value: "&Phi;" },
    { key: "plus", value: "&#43;" },
    { key: "plusmn", value: "&plusmn;" },
    { key: "pound", value: "&#35;" },
    { key: "prime", value: "&prime;" },
    { key: "quote", value: "&quot;" },
    { key: "radical", value: "&#8730;" },
    { key: "reg", value: "&reg;" },
    { key: "sub", value: "<span class='subscript'>" },
    { key: "/sub", value: "</span>" },
    { key: "sup", value: "<span class='superscript'>" },
    { key: "/sup", value: "</span>" },
    { key: "super", value: "<span class='superscript'>" },
    { key: "/super", value: "</span>" },
    { key: "tau", value: "<span class='serif'>&tau;</span>" },
    { key: "TM", value: "&trade;" },
    { key: "tm", value: "&trade;" },
    { key: "u", value: "<u>" },
    { key: "/u", value: "</u>" },

    { key: "aacute", value: "&aacute;" },
    { key: "acirc", value: "&acirc;" },
    { key: "agrave", value: "&agrave;" },
    { key: "auml", value: "&auml;" },
    { key: "eacute", value: "&eacute;" },
    { key: "ecirc", value: "&ecirc;" },
    { key: "egrave", value: "&egrave;" },
    { key: "euml", value: "&euml;" },
    { key: "iacute", value: "&iacute;" },
    { key: "icirc", value: "&icirc;" },
    { key: "igrave", value: "&igrave;" },
    { key: "iuml", value: "&iuml;" },
    { key: "oacute", value: "&oacute;" },
    { key: "ocirc", value: "&ocirc;" },
    { key: "ograve", value: "&ogave;" },
    { key: "ouml", value: "&ouml;" },
    { key: "uacute", value: "&uacute;" },
    { key: "ucirc", value: "&ucirc;" },
    { key: "ugrave", value: "&ugrave;" },
    { key: "uuml", value: "&uuml;" },
    { key: "yacute", value: "&yacute;" },
    { key: "ycirc", value: "&ycirc;" },
    { key: "ygrave", value: "&ygrave;" },
    { key: "yuml", value: "&yuml;" },

    { key: "Aacute", value: "&Aacute;" },
    { key: "Acirc", value: "&Acirc;" },
    { key: "Agrave", value: "&Agrave;" },
    { key: "Auml", value: "&Auml;" },
    { key: "Eacute", value: "&Eacute;" },
    { key: "Ecirc", value: "&Ecirc;" },
    { key: "Egrave", value: "&Egrave;" },
    { key: "Euml", value: "&Euml;" },
    { key: "Iacute", value: "&Iacute;" },
    { key: "Icirc", value: "&Icirc;" },
    { key: "Igrave", value: "&Igrave;" },
    { key: "Iuml", value: "&Iuml;" },
    { key: "Oacute", value: "&Oacute;" },
    { key: "Ocirc", value: "&Ocirc;" },
    { key: "Ograve", value: "&Ogave;" },
    { key: "Ouml", value: "&Ouml;" },
    { key: "Uacute", value: "&Uacute;" },
    { key: "Ucirc", value: "&Ucirc;" },
    { key: "Ugrave", value: "&Ugrave;" },
    { key: "Uuml", value: "&Uuml;" },
    { key: "Yacute", value: "&Yacute;" },
    { key: "Ycirc", value: "&Ycirc;" },
    { key: "Ygrave", value: "&Ygrave;" },
    { key: "Yuml", value: "&Yuml;" }
];

export default function replaceSpecial (str) {
    if (str === null || str === undefined) return "";
    if (str.indexOf("|") < 0) return str;
    
    replaceTerms.forEach(rt => { str = str.replace(new RegExp(`\\|${rt.key}\\|`, 'g'), rt.value); });
    
    return str;
}